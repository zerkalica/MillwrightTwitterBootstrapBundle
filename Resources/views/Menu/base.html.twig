{% extends 'MillwrightMenuBundle:Default:knp_menu.html.twig' %}

{% block list %}
{% import 'knp_menu.html.twig' as macros %}

{% if item.hasChildren and options.depth is not sameas(0) and item.displayChildren %}

    {% if item.getLevel == 0 %}
        {# set root class only for root item #}
        {%- set classes = listAttributes is not empty and listAttributes.class is not empty
            ? [listAttributes.class] : [] %}
        {%- set classes = classes|merge(['nav']) %}
        {% if options.rootClass is defined %}
            {%- set classes = classes|merge([options.rootClass]) %}
        {% endif %}
        {%- set listAttributes = listAttributes|merge({'class': classes | join(' ')}) %}
    {% endif %}

    <ul{{ macros.attributes(listAttributes) }}>
        {{ block('children') }}
    </ul>
{% endif %}
{% endblock list %}

{% block item %}
{% if item.displayed %}
{% import 'knp_menu.html.twig' as macros %}

{# building the class of the item #}
    {%- set classes = item.attribute('class') is not empty ? [item.attribute('class')] : [] %}
    {%- if matcher.isCurrent(item) %}
        {%- set classes = classes|merge([options.currentClass]) %}
    {%- elseif matcher.isAncestor(item, options.depth) %}
        {%- set classes = classes|merge([options.ancestorClass]) %}
    {%- endif %}
    {%- if item.actsLikeFirst %}
        {%- set classes = classes|merge([options.firstClass]) %}
    {%- endif %}
    {%- if item.actsLikeLast %}
        {%- set classes = classes|merge([options.lastClass]) %}
    {%- endif %}

    {%- if item.hasChildren and options.isDropdown is not empty %}
        {%- set classes = classes|merge(['dropdown']) %}
    {%- endif %}

    {%- set attributes = item.attributes %}
    {%- if classes is not empty %}
        {%- set attributes = attributes|merge({'class': classes|join(' ')}) %}
    {%- endif %}
{# displaying the item #}
    <li{{ macros.attributes(attributes) }}>
    {{ block('element') }}
{# render the list of children#}
        {%- set childrenClasses = item.childrenAttribute('class') is not empty ? [item.childrenAttribute('class')] : [] %}
        {%- set childrenClasses = childrenClasses|merge(['menu_level_' ~ item.level, options.isDropdown is not empty ? 'dropdown-menu' : '']) %}
        {%- set listAttributes = item.childrenAttributes|merge({'class': childrenClasses|join(' ') }) %}
        {{ block('list') }}
    </li>
{% endif %}
{% endblock item %}

{% block element %}
    {% import 'knp_menu.html.twig' as macros %}
    {%- if item.hasChildren and options.isDropdown is not empty %}
        {%- set labelAttributes = item.labelAttributes %}
        {%- set classes = labelAttributes is not empty and labelAttributes.class is not empty ? [labelAttributes.class] : [] %}
        {%- set classes = classes|merge(['dropdown-toggle']) %}
        {%- set labelAttributes = labelAttributes|merge({'class': classes | join(' ')}) %}
        <a{{ macros.attributes(labelAttributes) }} href="#" data-toggle="dropdown">{{ block('label') }}<span class="caret"></span></a>
    {% else %}
        {{ block('linkSpanElement') }}
    {% endif %}
{% endblock element %}

{% block linkSpanElement %}
    {%- if item.uri is not empty and (not matcher.isCurrent(item) or options.currentAsLink) %}
        {{ block('linkElement') }}
    {%- else %}
        {{ block('spanElement') }}
    {%- endif %}
{% endblock linkSpanElement %}
