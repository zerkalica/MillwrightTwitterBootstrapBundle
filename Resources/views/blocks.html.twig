{#
    Core twig macroses library
    Blocks, model view, forms, dialog, table, link, datetime
#}

{#
    Basic blocks
#}

{#
    Convert attribute array to string

    @param {} attributes
    @example
         <div{{ _self.attributes({'class': 'test', 'id': 'block-1'}) }}>

#}
{% macro attributes(attributes) %}
    {% for name, value in attributes %}
        {%- if value is not none and value is not sameas(false) -%}
            {{- ' %s="%s"'|format(name, value is sameas(true) ? name|e : value|e)|raw -}}
        {%- endif -%}
    {%- endfor -%}
{% endmacro attributes %}

{#
    Clean up class attribute

    @param string attr
#}
{% macro attr_clean(attr) %}
    {{- attr|replace({'.': '_'})|lower -}}
{% endmacro attr_clean %}

{#
    Icon block

    @param string name icon name
    @param bool   inverted is icon color inverted
#}
{% macro icon(name, inverted) %}
    <i class="icon-{{ name }}{% if inverted|default(false) %} icon-white{% endif %}"></i>
{% endmacro %}

{#
    Abstract block begin

    @param string title              block title
    @param string translation_domain translation domain
    @param {}     attributes         block attributes: class, id, etc
#}
{% macro block_begin(title, translation_domain, attributes) %}
    {% if title is not empty %}
        <h3>{{ title|trans({}, translation_domain) }}</h3>
    {% endif %}
    <div{{ _self.attributes(attributes|default({})) }}>
{% endmacro block_begin %}

{#
    Abstract block end
#}
{% macro block_end() %}
    </div>
{% endmacro block_end %}

{#
    No data message
#}
{% macro no_data() %}
    {{ _self.block_begin() }}
        {{ 'no_data'|trans({}, 'MillwrightTwitterBootstrapBundle') }}
    {{ _self.block_end() }}
{% endmacro no_data %}

{#
    Model view blocks
#}

{#
    Begin model block

    @param string title              block title
    @param string translation_domain translation domain
#}
{% macro model_begin(title, translation_domain) %}
    {{ _self.block_begin(title, translation_domain, {'class': 'well'}) }}
{% endmacro model_begin %}

{#
    End model block
#}
{% macro model_end() %}
    {{ _self.block_end() }}
{% endmacro model_end %}

{#
    Begin model row block

    @param string id     translation key
    @param string domain translation domain
#}
{% macro model_row_begin(id, domain) %}
<div class="row-fluid">
    <strong class="span3 model-property">{{ id | trans({}, domain) }}: </strong>
    <span class="span9 model-value">
{% endmacro model_row_begin %}

{#
    End model row block
#}
{% macro model_row_end() %}
    </span>
</div>
{% endmacro model_row_end %}

{#
    Begin and end model row block

    @param string id     translation key
    @param string data   data to view
    @param string domain translation domain
    @param boolean raw
#}
{% macro model_row(id, data, domain, raw) %}
    {{ _self.model_row_begin(id, domain) }}
        {% if raw %}
            {{ data|raw }}
        {% else %}
            {{ data }}
        {% endif %}
    {{ _self.model_row_end() }}
{% endmacro model_row %}

{#
    Display array of model rows

    @param []     rows               array of model rows
    @param string translation_domain translation domain

    @example
    {{ m.model_body([
        ['contract.field.dealDuration', contract.dealDuration|convertUnit('s', 'd', 'bcc_extra_tools.days')],
        ['contract.field.couponDuration', contract.couponDuration|convertUnit('s', 'd', 'bcc_extra_tools.days')],
        ['contract.field.creditDuration', contract.creditDuration|convertUnit('s', 'd', 'bcc_extra_tools.days')],
        ['contract.field.maxCouponsPerUser', contract.maxCouponsPerUser],
    ], translation_domain) }}
#}
{% macro model(rows, title, translation_domain) %}
    {{ _self.model_begin(title, translation_domain) }}
    {% for item in rows %}
        {{ _self.model_row(item[0], item[1], translation_domain, item[2] is defined ? 1 : 0) }}
    {% endfor %}
    {{ _self.model_end() }}
{% endmacro model %}

{#
    Link and url helpers
#}

{#
    Link display

    @param string route route name
    @param {}     routeParams route params object
    @param string label link text
    @param string domain translation domain
    @param {}     translate_params
    @param {}     link attributes
#}
{% macro link(route, routeParams, label, domain, translate_params, attributes) %}
    {%- if translate_params is empty %}
        {%- set translate_params = {} %}
    {% endif %}
    {% set attributes = attributes|default({})|merge({'href': path(route, routeParams), 'id': route}) %}
    <a{{ _self.attributes(attributes) }}>
        {{ label|trans(translate_params, domain) }}
    </a>
{% endmacro link %}


{#
    Date time helpers
#}

{#
    Date time string

    @param DateTime date
    @param string format
    @example
        date_time(date)

#}
{% macro date_time(date, format) %}
    {%- if date is empty %}
        -
    {%- else -%}
        {%- if format is empty %}
            {% set format = 'd.m.Y H:i:s' %}
        {%- endif -%}
        {{ date|date(format) }}
    {%- endif -%}
{% endmacro date_time %}

{#
    Date string in short format

    @param DateTime date

    @example
        date_short(date)
#}
{% macro date_short(date) %}
    {{ _self.date_time(date,'d.m.Y') }}
{% endmacro date_short %}


{#
    Dialog blocks
#}

{#
    Begin dialog: write header, close button

    @param string header
    @param string translation_domain
    @param {}     attributes
#}
{% macro dialog_begin(header, translation_domain, attributes) %}
    {% set attributes = attributes|merge({'class': 'modal'}) %}
    <div{{ _self.attributes(attributes) }}>
        {% if header is not empty %}
            <div class="modal-header">
                <a class="close" data-dismiss="modal">Ã—</a>
                <h3>{{ header|trans({}, translation_domain) }}</h3>
            </div>
        {% endif %}
        <div class="modal-body">
{% endmacro dialog_begin %}

{#
    End dialog

    @param string footer footer text
#}
{% macro dialog_end(footer) %}
        </div>
        {% if footer is not empty %}
            <div class="modal-footer">
                {{ footer }}
            </div>
        {% endif %}
    </div> <!-- /modal -->
{% endmacro dialog_end %}

{#
    Full dialog

    @param string body

    @param string header
    @param string footer
    @param string translation_domain
    @param {}     attributes
#}
{% macro dialog_body(body, header, footer, translation_domain, attributes) %}
    {{ _self.dialog_begin(header, translation_domain, attributes) }}
        {{ body }}
    {{ _self.dialog_end(footer) }}
{% endmacro dialog_body %}



{#
    Form macro
#}

{#
    Form block begin

    @param Symfony\Component\Form\Form form       form object
    @param string                      action     form action url
    @param array                       attributes form tag attributes
    @param string                      title      legend title key
    @param string                      domain     title translate domain
    @param string                      translation_params title translation params
#}
{% macro form_begin(form, action, attributes, title, domain, translation_params) %}
    {% if attributes is empty %}
        {%- set attributes = {} %}
    {% endif %}

    {% if attributes.class is not defined %}
        {%- set attributes = attributes | merge({'class': 'form-horizontal'}) %}
    {% endif %}

    {% if attributes.id is not defined %}
        {%- set attributes = attributes | merge({'id': form.getName()}) %}
    {% endif %}

    {% if attributes.action is not defined %}
        {%- set attributes = attributes | merge({'action': action}) %}
    {% endif %}
    {% if attributes.method is not defined %}
        {%- set attributes = attributes | merge({'method': 'POST'}) %}
    {% endif %}
    {% if translation_params is empty %}
        {%- set translation_params = {} %}
    {% endif %}
    <form {{ form_enctype(form) }} {{ _self.attributes(attributes) }}>
    {% if title is not empty %}
        <legend>{{ title | trans(translation_params, domain) }}</legend>
    {% endif %}
    {{ form_widget(form) }}
{% endmacro form_begin %}

{#
    Form block end
#}
{% macro form_end() %}
    </form>
{% endmacro form_end %}

{#
    Form buttons block begin
#}
{% macro buttons_begin() %}
    <div class="form-actions">
{% endmacro buttons_begin %}

{#
    Form buttons block end
#}
{% macro buttons_end() %}
    </div>
{% endmacro buttons_end %}

{#
    Form button

    @param string        label              button translation label key
    @param string        domain             translation domain
    @param array|empty   translation_params
    @param string        type               button type: submit, reset
    @param string|empty  url                if not empty - generate link instead button
    @param boolean       primary            primary button
    @param array|empty   attributes         array of button tag attributes
#}
{% macro button(label, domain, translation_params, type, url, primary, attributes) %}
    {% if translation_params is empty %}
        {%- set translation_params = {} %}
    {% endif %}

    {%-set domain = domain ? domain : 'MillwrightTwitterBootstrapBundle' %}

    {%- set classes = attributes.class is defined ? [attributes.class, 'btn'] : ['btn'] %}
    {%- if primary is not empty %}
        {%- set classes = classes|merge(['btn-primary']) %}
    {% endif  %}
    {%- if attributes is empty %}
        {%- set attributes = {} %}
    {%- endif %}

    {%- set id = _self.attr_clean(attributes.id is defined ? attributes.id : label) %}
    {%- set attributes = attributes|merge({'class': classes|join(' '), 'id': id}) %}
    {%- set label = label|trans(translation_params, domain) %}

    {%- if url is empty %}
        {%- set type = type ? type : 'submit' %}
        {%- set attributes = attributes|merge({'type': type}) %}
        <button{{ _self.attributes(attributes) }}>{{ label }}</button>
    {%- else %}
        {%- set attributes = attributes|merge({'href': url}) %}
        <a{{ _self.attributes(attributes) }}>{{ label }}</a>
    {%- endif %}
{% endmacro button %}

{#
    Save submit button

    @param boolean primary is button primary
    @param array   attributes tag attributes
#}
{% macro button_save(primary, attributes) %}
    {{ _self.button('Save', '', {}, 'submit', '', true, attributes) }}
{% endmacro button_save %}

{#
    Cancel form link button

    @param string url cancel button url
    @param array  attributes tag attributes
#}
{% macro button_cancel(url, attributes) %}
    {%- if url is empty %}
        {%- set url = app.session.get('millwright.back_url') %}
    {% endif %}

    {{ _self.button('Cancel', '', {}, '', url, false, attributes) }}
{% endmacro button_cancel %}

{#
    Confirm submit button

    @param boolean primary is button primary
    @param array   attributes tag attributes
#}
{% macro button_confirm(primary, attributes) %}
    {{ _self.button('Confirm', '', {}, 'submit', '', true, attributes) }}
{% endmacro button_confirm %}

{#
    Confirm submit search

    @param boolean primary is button primary
    @param array   attributes tag attributes
#}
{% macro button_search(primary, attributes) %}
    {{ _self.button('Search', '', {}, 'submit', '', true, attributes) }}
{% endmacro button_search %}

{#
    Confirm submit reset

    @param boolean primary is button primary
    @param array   attributes tag attributes
#}
{% macro button_reset(primary, attributes) %}
    {{ _self.button('Reset', '', {}, 'reset', '', false, attributes) }}
{% endmacro button_reset %}

{#
    Form save and cancel buttons

    @param string backUrl cancel button url
#}
{% macro buttons_save_cancel(backUrl, label) %}
    {{ _self.buttons_begin() }}
        {{ _self.button_save(true, {'id': label ~ '__save'}) }}
        {{ _self.button_cancel(backUrl, {'id': label ~ '__cancel'}) }}
    {{ _self.buttons_end() }}
{% endmacro buttons_save_cancel %}

{#
    Form search and reset buttons
#}
{% macro buttons_search_reset(label) %}
    {{ _self.buttons_begin() }}
        {{ _self.button_search(true, {'id': label ~ '__search'}) }}
        {{ _self.button_reset(false, {'id': label ~ '__reset'}) }}
    {{ _self.buttons_end() }}
{% endmacro buttons_search_reset %}


{#
    Form view with two buttons: Save and Cancel

    @param Symfony\Component\Form\Form form
    @param string                      action     form action url
    @param string                      backUrl    cancel button url
    @param array                       attributes form tag attributes
#}
{% macro form_save_cancel(form, action, backUrl, attributes) %}
    {{ _self.form_begin(form, action, attributes) }}
        {{ _self.buttons_save_cancel(backUrl, form.getName()) }}
    {{ _self.form_end() }}
{% endmacro form_save_cancel %}

{#
    Form view with two buttons: Search and reset

    @param Symfony\Component\Form\Form form
    @param string                      action     form action url
    @param array                       attributes form tag attributes
#}
{% macro form_search_reset(form, action, attributes) %}
    {{ _self.form_begin(form, action, attributes) }}
        {{ _self.buttons_search_reset(form.getName()) }}
    {{ _self.form_end() }}
{% endmacro form_search_reset %}




{#
    Table macroses
#}

{#
    Begin table

    @param string translation_domain
    @param array columns
    @param KnpPaginationInterface
#}
{% macro table_begin(translation_domain, columns, pagination) %}
<table class="table table-striped">
    <thead>
        <tr>
            {% for col in columns %}

                {% if col.label is not defined %}
                    {% set col = {'label': col} %}
                {% endif %}

                {% if col.key is defined %}
                    <th class="{{ _self.attr_clean(col.label) }}">
                        {{ pagination.sortable(col.label, col.key, { 'translationDomain': translation_domain })|raw }}
                    </th>
                {% else %}
                    <th class="{{ _self.attr_clean(col.label) }}">
                        {{ col.label | trans({}, translation_domain) }}
                    </th>
                {% endif %}
            {% endfor %}
        </tr>
    </thead>
    <tbody>
{% endmacro table_begin %}

{#
   Table end
#}
{% macro table_end() %}
    </tbody>
</table>
{% endmacro table_end %}

{#
    Table row begin
#}
{% macro row_begin() %}
    <tr>
{% endmacro row_begin %}

{#
    Table row end
#}
{% macro row_end() %}
    </tr>
{% endmacro row_end %}

{#
    Table cell begin
#}
{% macro cell_begin() %}
    <td>
{% endmacro cell_begin %}

{#
    Table cell end
#}
{% macro cell_end() %}
    </td>
{% endmacro cell_end %}

{#
    Table row

    @param string[] values
#}
{% macro table_row(values) %}
    {{ _self.row_begin() }}
        {% for value in values %}
            {{ _self.cell_begin() }}
                {{ value|raw }}
            {{ _self.cell_end() }}
        {% endfor %}
    {{ _self.row_end() }}
{% endmacro table_row %}
